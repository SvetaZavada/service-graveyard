let allowModals = true;
const yesBtn = document.getElementById("yesBtn");
const noBtn = document.getElementById("noBtn");
const headerColors = {
  light: ["#0047ab"],
  dark: ["#00ffff", "#00ff00", "#ff1493", "#ffffff"]
};


const glitchSound = document.getElementById("glitchSound");
const errorSound = document.getElementById("errorSound");
const errorSrc = errorSound.querySelector("source").src;

glitchSound.load();
errorSound.load();


let sharedErrorSound = null;
let madnessActive = false;
let madnessInterval;
let madnessTimeout;

// –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
function unlockAudio() {
  [glitchSound, errorSound].forEach(audio => {
    const playPromise = audio.play();
    if (playPromise !== undefined) {
      playPromise
        .then(() => {
          audio.pause();
          audio.currentTime = 0;
        })
        .catch(err => {
          // Safari –º–æ–∂–µ—Ç —Ä—É–≥–Ω—É—Ç—å—Å—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        });
    }
  });
  // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ ‚Äî –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
  document.removeEventListener("click", unlockAudio);
  document.removeEventListener("touchstart", unlockAudio);
}

// –î–æ–±–∞–≤–∏–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
document.addEventListener("click", unlockAudio, { once: true });
document.addEventListener("touchstart", unlockAudio, { once: true });
  
function createMadModal({ title = "–û—à–∏–±–∫–∞", message = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", size = "normal", dark = false, glitch = false, headerColor = null }) {
  if (!allowModals) return; // üí£ –°—Ç–æ–ø, –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è
  const original = document.getElementById("start-modal");
  const clone = original.cloneNode(true);

  clone.classList.remove("start-model", "light", "dark", "small", "normal", "large");
  clone.classList.add(size, dark ? "dark" : "light");
if (glitch) {
  applyRandomGlitch(clone); // —ç—Ç–æ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ—Ç .glitchy –∏ –æ–¥–∏–Ω –∏–∑ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
}
  clone.style.top = Math.random() * 120 - 10 + "%";
  clone.style.left = Math.random() * 120 - 10 + "%";
  clone.style.zIndex = 100 + Math.floor(Math.random() * 1000);

  // –¶–≤–µ—Ç —à–∞–ø–∫–∏
  const headerEl = clone.querySelector(".modal-header");
  if (headerColor && headerEl) {
    headerEl.style.backgroundColor = headerColor;
  }

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–µ—Å—Ç–∏–∫ ‚Äî –±–µ–∑ —Ñ–æ–Ω–∞
  const titleWrap = clone.querySelector(".modal-title-wrap");
  const closeBtn = clone.querySelector(".modal-close");
 

  const titleEl = clone.querySelector(".modal-title");
if (titleEl && glitch) {
  titleEl.innerHTML = `<span class="glitchy-rgb">${title}</span>`;
} else if (titleEl) {
  titleEl.textContent = title;
}

  const messageEl = clone.querySelector(".modal-content p");
  if (messageEl) messageEl.textContent = message;

  const yes = clone.querySelector("button#yesBtn");
  const no = clone.querySelector("button#noBtn");
  if (yes) yes.onclick = triggerMadness;
  if (no) no.onclick = () => {};

  document.body.appendChild(clone);
  setTimeout(() => clone.remove(), 7000);

  playErrorPerModal();
}

noBtn.addEventListener("click", () => {
  window.location.href = "mems.html";
});

yesBtn.addEventListener("click", () => {
  if (madnessActive) return;

  madnessActive = true;
  glitchSound.play();
  glitchSound.volume = 0.25;

  // =============== –¢–ï–ö–°–¢–û–í–´–ï –ü–£–õ–´ ===============
const titlesBySize = {
  small: [
    "–°–±–æ–π",
    "–û—à–∏–±–∫–∞ 404",
    "Crash detected",
    "Access denied",
    "PANIC()",
    "Segfault",
    "Stack overflow",
    "Kernel trap",
    "Illegal instruction",
    "Null pointer",
    "FATAL ERROR",
    "core dumped",
    "Race condition",
    "Deadlock",
    "Timeout",
    "Unhandled exception",
    "assert(false)",
    "WTF?!",
    ":(){ :|:& };:"
  ],
  normal: [
    "Critical system failure",
    "Integrity check failed",
    "Unrecoverable exception",
    "Unhandled promise rejection",
    "Database is on fire",
    "Thread hung",
    "Out of memory",
    "We lost quorum",
    "Undefined behavior invoked",
    "Checkpoint corrupted",
    "Breakpoint hit in production",
    "SIGKILL ignored",
    "Entropy depleted",
    "Stack canary triggered",
    "Segmentation fault (core dumped)",
    "Illegal state transition",
    "–ù–µ—É—Å—Ç—Ä–∞–Ω–∏–º–∞—è –æ—à–∏–±–∫–∞",
    "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω",
    "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Ö–∞–æ—Å"
  ],
  large: [
    "–°–∏—Å—Ç–µ–º–∞ –≤–æ—à–ª–∞ –≤ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
    "–°–æ–∑–Ω–∞–Ω–∏–µ —É—Ç–µ–∫–ª–æ –≤ /dev/null",
    "Observer effect triggered",
    "Schr√∂dinger exception detected",
    "We are out of known states",
    "Kernel panic ‚Äî not syncing",
    "The simulation noticed you",
    "Reality checksum mismatch",
    "Undefined is not a function (but here we are)",
    "Recursion limit exceeded ‚Äî again",
    "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—à–ª–∏ –≤ –æ—Ç–ø—É—Å–∫",
    "–ú—ã —Ç–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏",
    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∏–ª–ª—é–∑–∏—è",
    "Your error has an error",
    "You shouldn't be seeing this"
  ]
};

const messagesBySize = {
  small: [
    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.",
    "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è. –Ø–¥—Ä–æ —Å–±—Ä–æ—à–µ–Ω–æ.",
    "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞—Ü–∏–∫–ª–∏–ª—Å—è.",
    "–ü–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
    "SIGSEGV. –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–µ–ª—å–∑—è.",
    "–ü–æ—Ç–æ–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
    "–í–∏—Å—è–∫. –ñ—ë—Å—Ç–∫–∏–π.",
    "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
    "–°–ª–æ–º–∞–ª–æ—Å—å –≤—Å—ë.",
    "–ù–µ–≤–µ—Ä–Ω—ã–π –æ–ø–∫–æ–¥.",
    "Memory leak detected."
  ],
  normal: [
    "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ –ø—Ä–æ–±–æ–≤–∞—Ç—å.",
    "–ü—Ä–æ—Ü–µ—Å—Å —É—à—ë–ª –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é —Ä–µ–∫—É—Ä—Å–∏—é –∏ –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è.",
    "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è –Ω–µ —É—Å—Ç–æ–π—á–∏–≤–∞. –ú—ã –≤ –ø–ª–æ—Ö–æ–π –≤–µ—Ç–∫–µ.",
    "–ú—ã –ø–æ–π–º–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ —É–±–µ–∂–∞–ª–æ.",
    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≤—Å–µ–ª–µ–Ω–Ω–æ–π.",
    "–ù–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏–º–æ—Å—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
    "–ú—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ.",
    "–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å.",
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ‚Äî –æ–∂–∏–¥–∞–µ–º–∞—è."
  ],
  large: [
    "–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ï—Å–ª–∏ –≤—ã —ç—Ç–æ —á–∏—Ç–∞–µ—Ç–µ ‚Äî —É–∂–µ –ø–æ–∑–¥–Ω–æ.",
    "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏. –¢–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã, –∞ –º—ã ‚Äî –Ω–µ—Ç.",
    "–í—Å–µ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—Ä—É—à–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∏–Ω–µ—Ä—Ü–∏–∏.",
    "–õ–æ–≥–∏–∫–∞ –æ—Ç–∫–∞–∑–∞–ª–∞. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–±–æ–¥—É –≤–º–µ—Å—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏.",
    "–ì—Ä–∞–Ω–∏—Ü–∞ —Ö–∞–æ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –î–∞–ª—å—à–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å–∏–Ω–∏–π —ç–∫—Ä–∞–Ω.",
    "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –∫—ç—à–µ–º. –ö–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–∏–º.",
    "–ú–æ–¥–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–∏—Ä–∞. –ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã—Ä—É–±–∞—Ç—å."
  ]
};

// –°–ª—É—á–∞–π–Ω—ã–µ ¬´—Å—Ç–∞—Ä—ã–µ-–¥–æ–±—Ä—ã–µ¬ª —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
const classicErrorCodes = [
  "0xDEADFADE", "0xBADA55", "0xFA1LURE", "0xC0FFEE", "0xABADBABE",
  "0xBADCAFFE", "0xDEADC0DE", "0xFEE1DEAD", "0xDEFEC8", "0xC0000005",
  "HTTP_500", "HTTP_418", "SIGSEGV", "SIGKILL", "ERR_EMPTY_RESPONSE"
];

// =============== –£–ö–†–ê–®–ê–¢–ï–õ–ò –î–õ–Ø –ó–ê–ì–û–õ–û–í–ö–û–í ===============
function randHex(len = 8) {
  let s = "";
  for (let i = 0; i < len; i++) s += "0123456789ABCDEF"[Math.floor(Math.random() * 16)];
  return "0x" + s;
}
function randBin(len = 16) {
  let s = "";
  for (let i = 0; i < len; i++) s += Math.random() > 0.5 ? "1" : "0";
  return s;
}
function toBase64(str) {
  try {
    return btoa(unescape(encodeURIComponent(str)));
  } catch {
    return btoa(str);
  }
}

// –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥/–±–∏–Ω–∞—Ä—â–∏–Ω—É/Base64 –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
function decorateTitle(title) {
  const decorators = [
    (t) => `${t} [${randHex(8)}]`,
    (t) => `${t} :: ${randBin(24)}`,
    (t) => `${t} // ${toBase64(t).slice(0, 12)}‚Ä¶`,
    (t) => `${t} <${randHex(4)}:${randHex(4)}>`,
    (t) => t
  ];
  return decorators[Math.floor(Math.random() * decorators.length)](title);
}

// –ò–Ω–æ–≥–¥–∞ –≤–º–µ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–¥
function pickTitle(size) {
  const useCode = Math.random() < 0.25; // 25% —á–∏—Å—Ç–æ –∫–æ–¥
  if (useCode) return classicErrorCodes[Math.floor(Math.random() * classicErrorCodes.length)];
  const list = titlesBySize[size] || titlesBySize.normal;
  const t = list[Math.floor(Math.random() * list.length)];
  return decorateTitle(t);
}

function pickMessage(size) {
  const list = messagesBySize[size] || messagesBySize.normal;
  return list[Math.floor(Math.random() * list.length)];
}


   // üö® –ó–ê–ú–ï–ù–ê: —Ö–∞–æ—Ç–∏—á–Ω—ã–π —Å–ø–∞–≤–Ω –º–æ–¥–∞–ª–æ–∫ (–æ—Ç 1 –¥–æ 7), —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  function spawnModalsRandomly() {
  if (!madnessActive) return;

  const howMany = Math.floor(Math.random() * 20) + 7; // –æ—Ç 3 –¥–æ 10

  for (let i = 0; i < howMany; i++) {
    // –†–∞–∑–º–µ—Ä
    const sizes = ["small", "normal", "large"];
    const size = sizes[Math.floor(Math.random() * sizes.length)];




    // –¢–µ–º–∞
    const themes = ["light", "dark"];
    const theme = themes[Math.floor(Math.random() * themes.length)];

    const headerColor = headerColors[theme][Math.floor(Math.random() * headerColors[theme].length)];

    const title = pickTitle(size);
const message = pickMessage(size);

createMadModal({
  title,
  message,
  size,
  dark: theme === "dark",
  glitch: Math.random() < 0.5,
  headerColor
});

  }

  // –°–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è (–æ—Ç 100 –¥–æ 600 –º—Å)
  const nextDelay = Math.random() * 500 + 100;
  madnessInterval = setTimeout(spawnModalsRandomly, nextDelay);
}

  // –°—Ç–∞—Ä—Ç—É–µ–º —Ö–∞–æ—Å
  spawnModalsRandomly();

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º BSOD (–Ω–æ –ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)

  setTimeout(() => {
  glitchSound.pause();
  glitchSound.currentTime = 0;

  if (sharedErrorSound) {
    sharedErrorSound.pause();
    sharedErrorSound.currentTime = 0;
  }

  // üßπ –ì–ª—É—à–∏–º –≤—Å–µ –∞—É–¥–∏–æ
  document.querySelectorAll("audio").forEach(audio => {
    try {
      audio.pause();
      audio.currentTime = 0;
    } catch {}
  });

  // üéµ –ò–≥—Ä–∞–µ–º –∑–≤—É–∫ –æ—à–∏–±–∫–∏, —Ç–µ–ø–µ—Ä—å –±–µ–∑ –∫–∞–∫–∞—Ñ–æ–Ω–∏–∏
  errorSound.play();
}, 5500);
  
  madnessTimeout = setTimeout(() => {
  allowModals = false;
  clearTimeout(madnessInterval);

  const bsod = document.getElementById("bsod-preload");
  if (bsod) {
    document.body.style.overflow = "hidden";
document.documentElement.style.overflow = "hidden";
document.body.scrollLeft = 0;
document.documentElement.scrollLeft = 0;
    bsod.style.position = "fixed";
    bsod.style.left = "0";
    bsod.style.top = "0";
    bsod.style.width = "100vw";
    bsod.style.height = "100vh";
    bsod.style.zIndex = "9999";
    bsod.style.display = "flex";
    bsod.style.justifyContent = "center";
    bsod.style.alignItems = "center";
    bsod.style.padding = "20px";
    bsod.style.pointerEvents = "auto";
    bsod.style.fontFamily = "'IBM Plex Mono', monospace";
    bsod.style.background = "#0000AA";
    bsod.style.color = "white";
    bsod.style.visibility = "visible";
    bsod.style.opacity = "1";
  }
}, 6000);

});

function triggerMadness() {
  if (!madnessActive) yesBtn.click();
}



function playErrorPerModal() {
  errorSound.pause();
  errorSound.currentTime = 0;
  errorSound.volume = 1.0;
  errorSound.play().catch(() => {});
}


function applyRandomGlitch(modal) {
  const glitchClasses = ['glitchy-1', 'glitchy-2', 'glitchy-3', 'glitchy-rgb'];
  const randomClass = glitchClasses[Math.floor(Math.random() * glitchClasses.length)];

  modal.classList.add('glitchy', randomClass);

  // ‚ú® –î–æ–±–∞–≤–ª—è–µ–º RGB-–≥–ª–∏—Ç—á –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (randomClass === 'glitchy-rgb') {
    const header = modal.querySelector('.modal-header');
    if (header) {
      header.classList.add('glitchy-rgb');
    }
  }
}

